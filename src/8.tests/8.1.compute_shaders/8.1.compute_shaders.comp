#line 1
layout(binding = 0, rgba8) uniform readonly image2D inTexture;
layout(binding = 1, rgba8) uniform restrict image2D outTexture1;
layout(binding = 2, rgba8) uniform restrict image2D outTexture2;

layout(local_size_x = GROUP_SIZE_X, local_size_y = GROUP_SIZE_Y) in;

#define KERNEL_HS 5
#define KERNEL_HS_SIZE (2 * KERNEL_HS)
#define KERNEL_HS_SIZE1 (2 * KERNEL_HS + 1)

#define KERNEL_DIV float(KERNEL_HS_SIZE1*KERNEL_HS_SIZE1)

#define METHOD 3

#if METHOD == 1
void method1() {
	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);

	vec4 FragColor = vec4(0.0);

	for (int i = -KERNEL_HS; i <= KERNEL_HS; ++i)
		for (int j = -KERNEL_HS; j <= KERNEL_HS; ++j)
			FragColor += imageLoad(inTexture, texCoord + ivec2(i, j));
	FragColor /= KERNEL_DIV;

	imageStore(outTexture1, texCoord, FragColor);
}
#endif

#if METHOD == 2
shared ivec2 texCoord0;
shared vec4 texels[GROUP_SIZE_X + KERNEL_HS_SIZE][GROUP_SIZE_Y + KERNEL_HS_SIZE];

#define SAFE_BOUNDS 0

void method2() {
	if (gl_LocalInvocationIndex == 0) {
		#if SAFE_BOUNDS
			uvec2 imgSize = imageSize(inTexture);
		#endif
		texCoord0 = ivec2(gl_GlobalInvocationID.xy);
		for (int i = -KERNEL_HS; i < GROUP_SIZE_X + KERNEL_HS; ++i) {
			for (int j = -KERNEL_HS; j < GROUP_SIZE_Y + KERNEL_HS; ++j) {
				ivec2 texCoord = texCoord0 + ivec2(i, j);

				#if SAFE_BOUNDS
					bvec4 ok = bvec4(greaterThanEqual(texCoord, uvec2(0)), lessThan(texCoord, imgSize));
					#if 1
						if (all(ok))
							texels[i + KERNEL_HS][j + KERNEL_HS] = imageLoad(inTexture, texCoord);
						else
							texels[i + KERNEL_HS][j + KERNEL_HS] = vec4(0.0);
					#else
						texels[i + KERNEL_HS][j + KERNEL_HS] = mix(imageLoad(inTexture, texCoord), vec4(0.0), vec4(ok));
					#endif
				#else
					texels[i + KERNEL_HS][j + KERNEL_HS] = imageLoad(inTexture, texCoord);
				#endif
			}
		}
		imageStore(outTexture1, texCoord0, texels[KERNEL_HS][KERNEL_HS]);
	}

	//barrier();
	//memoryBarrierShared();

	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 readTexDiff = texCoord - texCoord0;

	vec4 FragColor = vec4(0.0);

	for (int i = -KERNEL_HS; i <= KERNEL_HS; ++i)
		for (int j = -KERNEL_HS; j <= KERNEL_HS; ++j)
			FragColor += texels[readTexDiff.x + i + KERNEL_HS][readTexDiff.y + j + KERNEL_HS];
	FragColor /= KERNEL_DIV;

	imageStore(outTexture1, texCoord, FragColor);
}
#endif

#if METHOD == 3

shared ivec2 texCoord0;
shared vec4 texels[GROUP_SIZE_X + KERNEL_HS_SIZE][GROUP_SIZE_Y + KERNEL_HS_SIZE];
shared bool texelsFilled[GROUP_SIZE_X + KERNEL_HS_SIZE][GROUP_SIZE_Y + KERNEL_HS_SIZE];
shared uint texelsLock[GROUP_SIZE_X + KERNEL_HS_SIZE][GROUP_SIZE_Y + KERNEL_HS_SIZE];

void takeLock(uvec2 relpos) {
	uint lock_available;
	do {
		// Take the lock - the value in lock_image is 0 if the lock
		// is not already taken. If so, then it is overwritten with
		// 1 otherwise it is left alone. The function returns the value
		// that was originally in memory - 0 if the lock was not taken,
		// 1 if it was. We terminate the loop when we see that the lock
		// was not already taken and thus we now hold it because we’ve
		// written a one to memory.
		lock_available = atomicCompSwap(texelsLock[relpos.x][relpos.y], 0, 1);
	} while (lock_available == 0);
}

void releaseLock(uvec2 relpos)
{
	atomicExchange(texelsLock[relpos.x][relpos.y], 0);
}


void method3() {
	if (gl_LocalInvocationIndex == 0) {
		texCoord0 = ivec2(gl_GlobalInvocationID.xy);
		for (int i = 0; i < GROUP_SIZE_X + KERNEL_HS_SIZE; ++i)
			for (int j = 0; j < GROUP_SIZE_Y + KERNEL_HS_SIZE; ++j) {
				texelsLock[i][j] = 0u;
				texelsFilled[i][j] = false;
			}
	}

	barrier();
	memoryBarrierShared();

	ivec2 texCoord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 readTexDiff = texCoord - texCoord0;

	vec4 FragColor = vec4(0.0);

	for (int i = -KERNEL_HS; i <= KERNEL_HS; ++i) {
		for (int j = -KERNEL_HS; j <= KERNEL_HS; ++j) {
			vec4 thisTexel;

			uvec2 relpos = ivec2(readTexDiff.x + i + KERNEL_HS, readTexDiff.y + j + KERNEL_HS);

			//takeLock(relpos);

			if (texelsFilled[relpos.x][relpos.y]) {
				thisTexel = texels[relpos.x][relpos.y];
			} else {
				thisTexel = imageLoad(inTexture, texCoord + ivec2(i, j));
				texels[relpos.x][relpos.y] = thisTexel;
				texelsFilled[relpos.x][relpos.y] = true;
			}

			//releaseLock(relpos);

			FragColor += thisTexel;
		}
	}
	FragColor /= KERNEL_DIV;

	imageStore(outTexture1, texCoord, FragColor);	

}

#endif


void main()
{
	#if METHOD == 1
		method1();
	#elif METHOD == 2
		method2();
	#elif METHOD == 3
		method3();
	#endif
}